Onload-9.1.0
============

 This is a feature preview of Onload including a new version of the
 sfc net driver.

 This release is not generally supported for acceleration use cases.

 Please see the ChangeLog for a full list of changes.


Linux distribution support
--------------------------

 This package can be installed on:
 - Red Hat Enterprise Linux 8.10
 - Red Hat Enterprise Linux 9.4 - 9.6
 - Red Hat Enterprise Linux 10.0
 - Canonical Ubuntu Server LTS 22.04 and 24.04
 - Debian 12 "Bookworm"
 - Linux kernels 5.11 - 6.14


AMD Solarflare(TM) X4 Series Ethernet Adapter
---------------------------------------------

This release adds support for the X4 adapter. The following features will
benefit from improved support in future versions of Onload:

- NIC reset is not handled. A driver reload is required post reset.
- Filter handling when interfaces change state does not operate correctly
- Multicast replication between the Express and Enterprise datapath is not
  supported. To use multicast replication onload must be forced to use only
  the Enterprise datapath with EF_RX_DATAPATH=enterprise. Note that when
  this option is set unicast traffic will also be using the Enterprise
  datapath.
- Filter redirection is not supported, which may lead to unexpected behaviour
  in scenerios where port numbers are reused.

X4 Datapath Restrictions
------------------------

- The Wire Order API (WODA) is only guaranteed to operate correctly where
  only the Enterprise RX path is selected (EF_RX_DATAPATH=enterprise)
- Application clustering (SO_REUSEPORT/EF_CLUSTER_SIZE) is only supported with
  EF_RX_DATAPATH=enterprise
- Sharing an event queue between multiple VIs is not supported when using the
  express datapath. This limitation also applies to X3 network cards.

X4 Diagnostics
--------------

The onload_shrubdump tool provides diagnostic information from shared
reusable buffer controllers but the format of its output cannot be
relied upon to be consistent between this release and future releases.
The debug logging behaviour of the controllers themselves is also subject to
change.

X4 Known Issues
---------------

- Onload TX event processing can become starved, leading to EVQ overflow,
  manifesting as an assertion failure or kernel panic in efct_poll_tx().
- When an onload stack is created using the Express datapath a log message
  is emitted warning that the queue size has been rounded up. This is because
  the minimum queue size on X4 is higher than the default value and is
  harmless.


AMD Alveo(TM) X3 Series Low Latency Ethernet Adapter
----------------------------------------------------

The minimum compatible X3522 driver version to match the Onload supported OS
list is v1.6.8.0.


New ef_receive_poll() API call
------------------------------

In recent releases, the ef_vi API gained a facility to poll for receives
separately from transmissions, for potential latency improvements in some
situations. API usage of ef_receive_poll() is identical to that of
ef_eventq_poll() although usage should be gated by a check for support by
the capabilities API (EF_VI_CAP_RX_POLL), for example:

    rc = ef_vi_capabilities_get(driver_handle, ifindex, EF_VI_CAP_RX_POLL,
                                &can_rx_poll);

    if( rc == 0 && can_rx_poll )
      num_events = ef_receive_poll(vi, events, max_events);
    else
      num_events = ef_eventq_poll(vi, events, max_events);

    for( i = 0; i < num_events; i++ ) {
      switch( EF_EVENT_TYPE(events[i]) ) {
        /* handle rx events */
      }
    }

See also the source code for eflatency which uses this feature.


Smart Data Cache Injection
--------------------------

Smart Data Cache Injection (SDCI) support has been added to allow steering of
network packets directly to a core's L2 cache. Currently, SDCI is limited to
X2/X4 NICs and must be configured as documented below. The steering tag used is
such that the data is steered to the core complex that the VI is created on.

SDCI support in the sfc net driver requires a kernel with TPH support
(i.e., CONFIG_PCIE_TPH=y), otherwise the request for SDCI support will be
overriden. To verify whether SDCI support is enabled after compilation, check
the compilation log for lines of the format:

    Kernel does not support PCIE_TPH
    TPH functionality will be disabled

Also be aware that use of an onload with SDCI support running on a machine that
lacks CPU support will result in verbose logging from the sfc net driver when
it fails to get the steering tags for each of its channels. This will result
in messages of the following format being added to the kernel log (dmesg):

    pcie_tph_get_cpu_st error(-22) channel <intf-name>-<channel>, cpu <cpu>

On systems where SDCI is not supported by the PCIe root port the error logged
is:

    failed enabling TPH support

To use this feature with onload, the EF_TPH_MODE environment variable should be
used, which has the following valid values:

 - Disable SDCI (default)           : EF_TPH_MODE=0
 - Enable SDCI without steering tags: EF_TPH_MODE=1
 - Enable SDCI with steering tags   : EF_TPH_MODE=2

To use this feature with ef_vi, one can provide the following VI flags at VI
allocation time:

 - Enable SDCI without steering tags: EF_VI_ENABLE_TPH
 - Enable SDCI with steering tags   : (EF_VI_ENABLE_TPH | EF_VI_TPH_TAG_MODE)

A more coarse-grained solution also exists at the application level, which will
apply to all VIs, using the EF_VI_EXTRA_VI_FLAGS environment variable:

 - Enable SDCI without steering tags: EF_VI_EXTRA_VI_FLAGS=tph_enable
 - Enable SDCI with steering tags   : EF_VI_EXTRA_VI_FLAGS=tph_enable,tph_mode

Please note that when using SDCI with steering tags, a NIC reset may result in
incorrect steering tags being used, which may degrade performance.


X2 Rx Timestamping with very old firmware versions
--------------------------------------------------

A workaround for handling v7.1 firmware on X2 has been removed, which would
lead to inaccurate timestamps if that firmware was in use. Anyone using this
outdated firmware should update to a supported version.


Indirect Branch Tracking (IBT) Incompatibility
----------------------------------------------

Onload is not compatible with IBT. To use Onload with kernels which include IBT
support (e.g. RHEL10), ibt=off should be appended to the kernel commandline.
Attempting to load the onload drivers when IBT is still enabled will result in
failure to insert the sfc_resource kernel module. Onload will also output a
message to the kernel log suggesting ibt=off is appended to the kernel
commandline.


New package for example applications
------------------------------------

Source code examples showcasing how to build applications to use certain
features of Onload and ef_vi are now included in a new optional subpackage
called 'onload-examples'. The examples were previously available in Onload
tarball source release packages and could be extracted from RPM and Debian
source packages.


DKMS RPM no longer includes userspace and is built from SRPM bundle
-------------------------------------------------------------------

To use DKMS, build and install the DKMS RPM and userspace RPM sub-packages
together from the Source RPM.


Deprecation of tarball installation method (removal under consideration)
------------------------------------------------------------------------

A future feature release MAY drop the provision of an OS-independent
'tarball' release package. In the meantime, the OS-specific packages (source
RPM and source DEB) are recommended for the best installation experience.
Docker images are also available via the Onload Operator v3.0 for Kubernetes.

Operating System package formats and their tools provide the best integration
for user systems and allow dependencies between Onload, related components
(TCP Direct, the control plane, sfc net driver, sfptpd) and the Operating
System itself to be resolved clearly and reliably. The OS-independent
'tarball' method requires more attention to detailed preparatory instructions
in the user guide.

Please contact your sales or support representative if you have any feedback
on this proposed change in direction for packaging support.

(c) Copyright 2025 Advanced Micro Devices, Inc.
